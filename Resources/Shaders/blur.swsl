light_mode unshaded;
blend_mode none;
preset raw;

uniform highp float size;

const highp float pi = radians(180.);
varying highp float sigma; 
varying highp float sigma2;
varying highp float pisigma2; 

varying highp vec2 pos;

highp float gaussian(highp vec2 i) {
    highp float top = exp(-((i.x * i.x) + (i.y * i.y)) / sigma2);
    highp float bot = pisigma2;
    return top / bot;
}

highp vec4 blur(sampler2D sp, highp vec2 uv, highp vec2 scale) {
    highp vec2 offset;
    highp float weight = gaussian(offset);
    highp vec4 col = texture(sp, uv) * weight;
    highp float accum = weight;
    
    for (highp int x = 0; x <= int(size)*5; ++x) {
        for (highp int y = 1; y <= int(size)*5; ++y) {
            offset = vec2(x, y);
            weight = gaussian(offset);
            col += texture(sp, uv + scale * offset) * weight;
            accum += weight;

            col += texture(sp, uv - scale * offset) * weight;
            accum += weight;

            offset = vec2(-y, x);
            col += texture(sp, uv + scale * offset) * weight;
            accum += weight;

            col += texture(sp, uv - scale * offset) * weight;
            accum += weight;
        }
    }
    
    return col / accum;
}

void vertex()
{
    VERTEX = apply_mvp(VERTEX);
    pos = (VERTEX + vec2(1.0)) / 2.0;
    sigma = float(size*5.0) * 0.25;
    sigma2 = 2.0 * sigma * sigma;
    pisigma2 = pi * sigma2;
}

void fragment() {
	highp vec4 col = zTexture(UV);
	highp vec2 ps = TEXTURE_PIXEL_SIZE;
    
    COLOR = blur(TEXTURE, UV, ps);    
}
name: Build, Test & Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    permissions:
      pull-requests: write
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Setup submodule
      run: |
        git submodule update --init --recursive
    - name: Pull engine updates
      uses: space-wizards/submodule-dependency@v0.1.5
    - name: Update Engine Submodules
      run: |
        cd RobustToolbox/
        git submodule update --init --recursive
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 9.0.100
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --property WarningLevel=${{ matrix.os == 'ubuntu-latest' && '4' || '0' }} --configuration Release --no-restore /m
    - name: Content.Tests
      shell: pwsh
      run: |
        $env:COMPlus_gcServer=1
        dotnet test --no-build Content.Tests/Content.Tests.csproj -v n --settings tests.runsettings --collect "XPlat Code Coverage" --results-directory:"./TestResults/"
    - name: Content.Tests (Optimizations Disabled)
      shell: pwsh
      env:
        NO_OPTS: "true"
      run: |
        $env:COMPlus_gcServer=1
        dotnet test --no-build Content.Tests/Content.Tests.csproj -v n
    - name: Content.IntegrationTests
      shell: pwsh
      run: |
        $env:COMPlus_gcServer=1
        dotnet test --no-build Content.IntegrationTests/Content.IntegrationTests.csproj -v n --settings tests.runsettings --collect "XPlat Code Coverage" --results-directory:"./TestResults/"
    - name: Publish OpenDream
      if: github.event_name == 'push'
      run: |
        dotnet run --project OpenDreamPackageTool --no-build --configuration Release -- --server --hybrid-acz --configuration Release --platform ${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }} --output output_release/
        dotnet run --project OpenDreamPackageTool --no-build --configuration Release -- --server --hybrid-acz --configuration Tools --platform ${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }} --output output_tools/

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.12
      with:
        reports: './TestResults/**/coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'MarkdownSummaryGithub' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, OpenCover, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, Html_BlueRed_Summary, JsonSummary, CodeClimate, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownAssembliesSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, SvgChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        sourcedirs: '' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
        historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
        workingdir: '' # Optional working directory. If available, the targetdir, sourcedirs and historydir are interpreted relative to the working directory (only if not specified as absolute paths).
        plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
        assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        riskhotspotassemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the risk hotspots. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        riskhotspotclassfilters: '+*' # Optional list of classes that should be included or excluded in the risk hotspots. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: '' # Optional title.
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        license: '' # Optional license for PRO version. Get your license here: https://reportgenerator.io/pro
        customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: coveragereport/SummaryGithub.md
    - name: Publish DMCompiler
      if: github.event_name == 'push'
      run: dotnet publish DMCompiler -c Release -o output_release/DMCompiler_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}
    - name: Gzip releases
      if: github.event_name == 'push'
      run: |
        tar -czvf output_release/DMCompiler_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}.tar.gz -C output_release DMCompiler_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}
        tar -czvf output_release/OpenDreamServer_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}.tar.gz -C output_release OpenDreamServer_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}
        tar -czvf output_tools/OpenDreamServer_TOOLS_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}.tar.gz -C output_tools OpenDreamServer_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}
    - name: Upload artifact
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: |
          output_release/*.tar.gz
          output_tools/*.tar.gz
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Publish latest release
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          artifacts/*/*/*.tar.gz


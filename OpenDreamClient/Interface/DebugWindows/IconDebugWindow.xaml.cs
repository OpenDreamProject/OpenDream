using OpenDreamClient.Rendering;
using OpenDreamShared.Dream;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace OpenDreamClient.Interface.DebugWindows;

/// <summary>
/// A debug window that displays information about an icon
/// </summary>
[GenerateTypedNameReferences]
internal sealed partial class IconDebugWindow : OSWindow {
    private readonly DreamIcon _icon;

    public IconDebugWindow(DreamIcon icon) {
        RobustXamlLoader.Load(this);
        Owner = IoCManager.Resolve<IClyde>().MainWindow;
        Title = icon.Appearance?.Name ?? "Icon properties";

        _icon = icon;
        RefreshButton.OnPressed += OnRefreshPressed;
        Update();
    }

    private void Update() {
        // TODO: Include overlays and underlays? May be complicated to do
        Texture.Texture = _icon.LastRenderedTexture;

        var appearance = _icon.Appearance;
        if (appearance == null) {
            Tabs.Visible = false;
            Container.AddChild(new Label { Text = "Icon has no appearance" });

            return;
        }

        PropertiesTable.RemoveAllChildren();
        OverlaysGrid.RemoveAllChildren();
        UnderlaysGrid.RemoveAllChildren();
        VisContentsGrid.RemoveAllChildren();

        // Would be nice if we could use ViewVariables instead, but I couldn't find a nice way to do that
        // Would be especially nice if we could use VV to make these editable
        AddPropertyIfNotDefault("Name", appearance.Name, IconAppearance.Default.Name);
        AddPropertyIfNotDefault("Icon State", appearance.IconState, IconAppearance.Default.IconState);
        AddPropertyIfNotDefault("Direction", appearance.Direction, IconAppearance.Default.Direction);
        AddPropertyIfNotDefault("Inherits Direction", appearance.InheritsDirection, IconAppearance.Default.InheritsDirection);
        AddPropertyIfNotDefault("Pixel Offset X/Y", appearance.PixelOffset, IconAppearance.Default.PixelOffset);
        AddPropertyIfNotDefault("Pixel Offset W/Z", appearance.PixelOffset2, IconAppearance.Default.PixelOffset2);
        AddPropertyIfNotDefault("Color", appearance.Color, IconAppearance.Default.Color);
        AddPropertyIfNotDefault("Alpha", appearance.Alpha, IconAppearance.Default.Alpha);
        AddPropertyIfNotDefault("Glide Size", appearance.GlideSize, IconAppearance.Default.GlideSize);
        AddPropertyIfNotDefault("Layer", appearance.Layer, IconAppearance.Default.Layer);
        AddPropertyIfNotDefault("Plane", appearance.Plane, IconAppearance.Default.Plane);
        AddPropertyIfNotDefault("Blend Mode", appearance.BlendMode, IconAppearance.Default.BlendMode);
        AddPropertyIfNotDefault("Appearance Flags", appearance.AppearanceFlags, IconAppearance.Default.AppearanceFlags);
        AddPropertyIfNotDefault("Invisibility", appearance.Invisibility, IconAppearance.Default.Invisibility);
        AddPropertyIfNotDefault("Opacity", appearance.Opacity, IconAppearance.Default.Opacity);
        AddPropertyIfNotDefault("Override", appearance.Override, IconAppearance.Default.Override);
        AddPropertyIfNotDefault("Render Source", appearance.RenderSource, IconAppearance.Default.RenderSource);
        AddPropertyIfNotDefault("Render Target", appearance.RenderTarget, IconAppearance.Default.RenderTarget);
        AddPropertyIfNotDefault("Mouse Opacity", appearance.MouseOpacity, IconAppearance.Default.MouseOpacity);

        foreach (var overlay in _icon.Overlays) {
            AddDreamIconButton(OverlaysGrid, overlay);
        }

        foreach (var underlay in _icon.Underlays) {
            AddDreamIconButton(UnderlaysGrid, underlay);
        }

        var entityManager = IoCManager.Resolve<IEntityManager>();
        foreach (var visContentNetEntity in appearance.VisContents) {
            var visContentEntity = entityManager.GetEntity(visContentNetEntity);

            if (entityManager.TryGetComponent(visContentEntity, out DMISpriteComponent? spriteComponent)) {
                AddDreamIconButton(VisContentsGrid, spriteComponent.Icon);
            } else {
                VisContentsGrid.AddChild(new Label { Text = $"Failed to get sprite component for {visContentEntity}" });
            }
        }
    }

    private void AddPropertyIfNotDefault(string propertyName, object? value, object? defaultValue) {
        if (value == null && defaultValue == null)
            return;
        if (value?.Equals(defaultValue) is true)
            return;

        PropertiesTable.AddChild(
            new Label {
                Text = propertyName,
                Margin = new(3, 0),
                HorizontalExpand = true
            }
        );

        PropertiesTable.AddChild(
            new Label {
                Text = value?.ToString() ?? "null",
                Margin = new(3, 0)
            }
        );
    }

    private void AddDreamIconButton(Control parent, DreamIcon icon) {
        var panel = new PanelContainer();

        panel.PanelOverride = new StyleBoxFlat(Color.White) {
            BorderThickness = new(1),
            BorderColor = Color.Black
        };

        var overlayButton = new TextureButton {
            TextureNormal = icon.LastRenderedTexture,
            SetSize = new(128, 128)
        };

        overlayButton.OnPressed += _ => {
            new IconDebugWindow(icon).Show();
        };

        panel.AddChild(overlayButton);
        parent.AddChild(panel);
    }

    private void OnRefreshPressed(BaseButton.ButtonEventArgs e) {
        Update();
    }
}

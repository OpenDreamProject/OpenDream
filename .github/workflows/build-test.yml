name: Build & Test

on:
  push:
    branches: [ master, artifact-test ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Setup submodule
      run: |
        git submodule update --init --recursive
    - name: Pull engine updates
      uses: space-wizards/submodule-dependency@v0.1.5
    - name: Update Engine Submodules
      run: |
        cd RobustToolbox/
        git submodule update --init --recursive
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.101
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore /m
    - name: Content.Tests
      shell: pwsh
      run: |
        $env:COMPlus_gcServer=1
        dotnet test --no-build Content.Tests/Content.Tests.csproj -v n
    - name: Content.IntegrationTests
      shell: pwsh
      run: |
        $env:COMPlus_gcServer=1
        dotnet test --no-build Content.IntegrationTests/Content.IntegrationTests.csproj -v n
    - name: Publish DMCompiler
      run: dotnet publish DMCompiler -c Release -o output/DMCompiler
    - name: Publish OpenDreamServer
      run: dotnet publish OpenDreamServer -c Release -o output/OpenDreamServer
    - name: Publish OpenDreamClient
      run: dotnet publish OpenDreamClient -c Release -o output/OpenDreamClient
    - name: Publish DMDisassembler
      run: dotnet publish DMDisassembler -c Release -o output/DMDisassembler
    - name: Gzip Releases
      if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
      run: |
        tar -czvf output/DMCompiler.tar.gz output/DMCompiler/*
        tar -czvf output/OpenDreamServer.tar.gz output/OpenDreamServer/*
        tar -czvf output/OpenDreamClient.tar.gz output/OpenDreamClient/*
        tar -czvf output/DMDisassembler.tar.gz output/DMDisassembler/*
    - name: Publish latest release
      uses: "marvinpinto/action-automatic-releases@latest"
      if: github.event_name == 'push' && matrix.os == 'ubuntu-latest'
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          output/*.tar.gz

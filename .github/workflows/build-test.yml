name: Build, Test & Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Setup submodule
      run: |
        git submodule update --init --recursive
    - name: Pull engine updates
      uses: space-wizards/submodule-dependency@v0.1.5
    - name: Update Engine Submodules
      run: |
        cd RobustToolbox/
        git submodule update --init --recursive
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 9.0.100
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: |
        dotnet build --property WarningLevel=${{ matrix.os == 'ubuntu-latest' && '4' || '0' }} --configuration Release --no-restore /m
    - name: Build native assets # TODO: a real script
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
            cargo build --release --manifest-path=./byondapi/Cargo.toml -p trampoline
            cp ./byondapi/target/release/byondcore.dll.lib meowtonin/crates/sys/link/windows/byondcore.dll.lib
            cp ./byondapi/target/release/byondcore.dll ./bin/Content.Server/byondcore.dll
            cp ./byondapi/target/release/byondcore.dll ./bin/Content.Tests/byondcore.dll
            cp ./byondapi/target/release/byondcore.dll ./bin/Content.IntegrationTests/byondcore.dll

            cargo build --release --manifest-path=./byondapi/Cargo.toml -p byondapitest
            cp ./byondapi/target/release/byondapitest.dll ./bin/Content.Server/byondapitest.dll
            cp ./byondapi/target/release/byondapitest.dll ./bin/Content.Tests/byondapitest.dll
            cp ./byondapi/target/release/byondapitest.dll ./bin/Content.IntegrationTests/byondapitest.dll
        elif [ "$RUNNER_OS" == "Linux" ]; then
            cargo build --release --manifest-path=./byondapi/Cargo.toml -p trampoline
            cp ./byondapi/target/release/libbyondcore.so meowtonin/crates/sys/link/linux/libbyondcore.so
            cp ./byondapi/target/release/libbyondcore.so ./bin/Content.Server/libbyondcore.so
            cp ./byondapi/target/release/libbyondcore.so ./bin/Content.Tests/libbyondcore.so
            cp ./byondapi/target/release/libbyondcore.so ./bin/Content.IntegrationTests/libbyondcore.so

            cargo build --release --manifest-path=./byondapi/Cargo.toml -p byondapitest
            cp ./byondapi/target/release/libbyondapitest.so ./bin/Content.Server/byondapitest.so
            cp ./byondapi/target/release/libbyondapitest.so ./bin/Content.Tests/byondapitest.so
            cp ./byondapi/target/release/libbyondapitest.so ./bin/Content.IntegrationTests/byondapitest.so
            ls -al ./bin/Content.Tests/byondapitest.so
        else
            # we only test windows/linux at time of writing
            exit 1
        fi
    - name: Content.Tests
      shell: pwsh
      run: |
        $env:COMPlus_gcServer=1
        dotnet test --no-build Content.Tests/Content.Tests.csproj -v n
    - name: Content.IntegrationTests
      shell: pwsh
      run: |
        $env:COMPlus_gcServer=1
        dotnet test --no-build Content.IntegrationTests/Content.IntegrationTests.csproj -v n
    - name: Publish OpenDream
      if: github.event_name == 'push'
      run: |
        dotnet run --project OpenDreamPackageTool --no-build --configuration Release -- --server --hybrid-acz --configuration Release --platform ${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }} --output output_release/
        dotnet run --project OpenDreamPackageTool --no-build --configuration Release -- --server --hybrid-acz --configuration Tools --platform ${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }} --output output_tools/
    - name: Publish DMCompiler
      if: github.event_name == 'push'
      run: dotnet publish DMCompiler -c Release -o output_release/DMCompiler_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}
    - name: Gzip releases
      if: github.event_name == 'push'
      run: |
        tar -czvf output_release/DMCompiler_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}.tar.gz -C output_release DMCompiler_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}
        tar -czvf output_release/OpenDreamServer_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}.tar.gz -C output_release OpenDreamServer_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}
        tar -czvf output_tools/OpenDreamServer_TOOLS_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}.tar.gz -C output_tools OpenDreamServer_${{ matrix.os == 'windows-latest' && 'win-x64' || 'linux-x64' }}
    - name: Upload artifact
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: |
          output_release/*.tar.gz
          output_tools/*.tar.gz
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Publish latest release
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          artifacts/*/*/*.tar.gz


using OpenDreamClient.Rendering;
using OpenDreamShared.Dream;
using OpenDreamShared.Rendering;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;

namespace OpenDreamClient.Input.ContextMenu;

[GenerateTypedNameReferences]
internal sealed partial class ContextMenuPopup : Popup {
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystemManager = default!;
    [Dependency] private readonly IMapManager _mapManager = default!;
    [Dependency] private readonly IUserInterfaceManager _uiManager = default!;
    private readonly TransformSystem? _transformSystem;
    private readonly ClientVerbSystem? _verbSystem;

    public int EntityCount => ContextMenu.ChildCount;

    private VerbMenuPopup? _currentVerbMenu;

    public ContextMenuPopup() {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _entitySystemManager.TryGetEntitySystem(out _transformSystem);
        _entitySystemManager.TryGetEntitySystem(out _verbSystem);
    }

    public void RepopulateEntities(IEnumerable<EntityUid> entities) {
        ContextMenu.RemoveAllChildren();

        if (_transformSystem == null)
            return;

        foreach (EntityUid entity in entities) {
            if (!_mapManager.IsGrid(_transformSystem.GetParent(entity).Owner)) // Not a child of another entity
                continue;
            if (!_entityManager.TryGetComponent(entity, out DMISpriteComponent? sprite)) // Has a sprite
                continue;
            if (sprite.Icon.Appearance.MouseOpacity == MouseOpacity.Transparent) // Not transparent to mouse clicks
                continue;

            var metadata = _entityManager.GetComponent<MetaDataComponent>(entity);

            ContextMenu.AddChild(new ContextMenuItem(this, new(_entityManager.GetNetEntity(entity)), metadata, sprite));
        }
    }

    public void SetActiveItem(ContextMenuItem item) {
        if (_currentVerbMenu != null) {
            _currentVerbMenu.Close();
            _uiManager.ModalRoot.RemoveChild(_currentVerbMenu);
        }

        _currentVerbMenu = new VerbMenuPopup(_verbSystem, GetSeeInvisible(), item.Target, item.EntityMetaData, item.EntitySprite);

        _currentVerbMenu.OnVerbSelected += Close;

        Vector2 desiredSize = _currentVerbMenu.DesiredSize;
        Vector2 verbMenuPos = item.GlobalPosition with { X = item.GlobalPosition.X + item.Size.X };
        _uiManager.ModalRoot.AddChild(_currentVerbMenu);
        _currentVerbMenu.Open(UIBox2.FromDimensions(verbMenuPos, desiredSize));
    }

    /// <returns>The see_invisible of our current mob</returns>
    private sbyte GetSeeInvisible() {
        if (_playerManager.LocalEntity == null)
            return 0;
        if (!_entityManager.TryGetComponent(_playerManager.LocalEntity, out DreamMobSightComponent? sight))
            return 0;

        return sight.SeeInvisibility;
    }
}

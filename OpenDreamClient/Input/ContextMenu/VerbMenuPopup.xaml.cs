using OpenDreamClient.Rendering;
using OpenDreamShared.Dream;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace OpenDreamClient.Input.ContextMenu;

[GenerateTypedNameReferences]
internal sealed partial class VerbMenuPopup : Popup {
    public delegate void VerbSelectedHandler();

    public VerbSelectedHandler? OnVerbSelected;

    private readonly ClientVerbSystem? _verbSystem;

    private readonly ClientObjectReference _target;

    public VerbMenuPopup(ClientVerbSystem? verbSystem, sbyte seeInvisible, ClientObjectReference target, MetaDataComponent? entityMetaData, DMISpriteComponent? entitySprite) {
        RobustXamlLoader.Load(this);

        _verbSystem = verbSystem;
        _target = target;

        if (entityMetaData != null && !string.IsNullOrEmpty(entityMetaData.EntityDescription)) {
            DescLabel.Margin = new Thickness(4, 0, 4, 0);
            DescLabel.Text = entityMetaData.EntityDescription;
        } else {
            Desc.Visible = false;
        }

        if (verbSystem != null) {
            foreach (var verb in verbSystem.GetExecutableVerbs(_target)) {
                if (verb.VerbInfo.IsHidden(false, seeInvisible))
                    continue;

                AddVerb(verb.Id, verb.Src, verb.VerbInfo);
            }
        }
    }

    private void AddVerb(int verbId, ClientObjectReference verbSrc, VerbSystem.VerbInfo verbInfo) {
        var button = new Button {
            Text = verbInfo.Name
        };

        var takesTargetArg = verbInfo.GetTargetType() != null && !verbSrc.Equals(_target);

        button.OnPressed += _ => {
            _verbSystem?.ExecuteVerb(verbSrc, verbId, takesTargetArg ? [_target] : []);
            Close();
            OnVerbSelected?.Invoke();
        };

        VerbMenu.AddChild(button);
    }
}
